{
  "name": "inputmask",
  "version": "3.3.11",
  "description": "Inputmask is a javascript library which creates an input mask.  Inputmask can run against vanilla javascript, jQuery and jqlite.",
  "main": "index.js",
  "files": [
    "dist/",
    "css/"
  ],
  "scripts": {
    "start": "webpack --progress --watch --config webpack.config.js",
    "test": "grunt validate",
    "qunitpack": "webpack --progress --watch --config qunit/webpack.config.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/RobinHerbots/Inputmask.git"
  },
  "keywords": [
    "form",
    "input",
    "inputmask",
    "jquery",
    "jquery-plugin",
    "mask",
    "plugins"
  ],
  "author": {
    "name": "Robin Herbots",
    "url": "https://github.com/RobinHerbots"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/RobinHerbots/Inputmask/issues"
  },
  "homepage": "https://github.com/RobinHerbots/Inputmask",
  "devDependencies": {
    "babel-core": "^6.26.0",
    "babel-loader": "^7.1.2",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-stage-0": "^6.24.1",
    "css-loader": "^0.28.7",
    "grunt": "^1.0.1",
    "grunt-available-tasks": "^0.6.3",
    "grunt-browserify": "^5.2.0",
    "grunt-bump": "^0.8.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-clean": "^1.1.0",
    "grunt-contrib-uglify": "^3.1.0",
    "grunt-eslint": "^20.1.0",
    "grunt-karma": "^2.0.0",
    "grunt-nuget": "^0.3.0",
    "grunt-release": "^0.14.0",
    "grunt-shell": "^2.1.0",
    "grunt-webpack": "^3.0.2",
    "jqlite": "^0.2.42",
    "jquery": "^2.2.4",
    "karma": "^1.7.1",
    "karma-chrome-launcher": "^2.2.0",
    "karma-firefox-launcher": "^1.0.1",
    "karma-ie-launcher": "^1.0.0",
    "karma-phantomjs-launcher": "^1.0.4",
    "karma-qunit": "^1.2.1",
    "load-grunt-tasks": "^3.5.2",
    "phantomjs-prebuilt": "^2.1.15",
    "postcss": "^6.0.13",
    "postcss-cssnext": "^3.0.2",
    "postcss-loader": "^2.0.8",
    "qunitjs": "^2.4.0",
    "source-map-loader": "^0.2.2",
    "style-loader": "^0.19.0",
    "webpack": "^3.7.1"
  },
  "dependencies": {},
  "readme": "# Inputmask 3.x\r\n\r\nCopyright (c) 2010 - 2017 Robin Herbots Licensed under the MIT license ([http://opensource.org/licenses/mit-license.php](http://opensource.org/licenses/mit-license.php))\r\n\r\n[![NPM Version][npm-image]][npm-url] [![Dependency Status][david-image]][david-url] [![devDependency Status][david-dev-image]][david-dev-url]\r\n\r\nInputmask is a javascript library which creates an input mask.  Inputmask can run against vanilla javascript, jQuery and jqlite.\r\n\r\nAn inputmask helps the user with the input by ensuring a predefined format. This can be useful for dates, numerics, phone numbers, ...\r\n\r\nHighlights:\r\n- easy to use\r\n- optional parts anywere in the mask\r\n- possibility to define aliases which hide complexity\r\n- date / datetime masks\r\n- numeric masks\r\n- lots of callbacks\r\n- non-greedy masks\r\n- many features can be enabled/disabled/configured by options\r\n- supports readonly/disabled/dir=\"rtl\" attributes\r\n- support data-inputmask attribute(s)\r\n- alternator-mask\r\n- regex-mask\r\n- dynamic-mask\r\n- preprocessing-mask\r\n- JIT-masking\r\n- value formatting / validating without input element\r\n- AMD/CommonJS support\r\n- dependencyLibs: vanilla javascript, jQuery, jqlite\r\n- <strike>[Android support](README_android.md)</strike>\r\n\r\nDemo page see [http://robinherbots.github.io/Inputmask](http://robinherbots.github.io/Inputmask)\r\n\r\n[![donate](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=ZNR3EB6JTMMSS)\r\n\r\n## Setup\r\n### dependencyLibs\r\nInputmask can run against different javascript libraries.  \r\nYou can choose between:\r\n- inputmask.dependencyLib (vanilla)\r\n- inputmask.dependencyLib.jquery\r\n- inputmask.dependencyLib.jqlite\r\n- .... (others are welcome)\r\n\r\n### Classic web with <script\\> tag\r\nInclude the js-files which you can find in the `dist` folder.\r\n\r\nIf you want to include the Inputmask and all extensions. (with jQuery as dependencylib)\r\n```html\r\n<script src=\"jquery.js\"></script>\r\n<script src=\"dist/jquery.inputmask.bundle.js\"></script>\r\n<script src=\"dist/inputmask/phone-codes/phone.js\"></script>\r\n<script src=\"dist/inputmask/phone-codes/phone-be.js\"></script>\r\n<script src=\"dist/inputmask/phone-codes/phone-ru.js\"></script>\r\n```\r\nFor individual extensions. (with jQuery as dependencylib)\r\n```html\r\n<script src=\"jquery.js\"></script>\r\n<script src=\"dist/inputmask/inputmask.js\"></script>\r\n<script src=\"dist/inputmask/inputmask.extensions.js\"></script>\r\n<script src=\"dist/inputmask/inputmask.numeric.extensions.js\"></script>\r\n<script src=\"dist/inputmask/inputmask.date.extensions.js\"></script>\r\n<script src=\"dist/inputmask/inputmask.phone.extensions.js\"></script>\r\n<script src=\"dist/inputmask/jquery.inputmask.js\"></script>\r\n<script src=\"dist/inputmask/phone-codes/phone.js\"></script>\r\n<script src=\"dist/inputmask/phone-codes/phone-be.js\"></script>\r\n<script src=\"dist/inputmask/phone-codes/phone-ru.js\"></script>\r\n```\r\n\r\nFor individual extensions. (with vanilla dependencylib)\r\n```html\r\n<script src=\"dist/inputmask/dependencyLibs/inputmask.dependencyLib.js\"></script>\r\n<script src=\"dist/inputmask/inputmask.js\"></script>\r\n<script src=\"dist/inputmask/inputmask.extensions.js\"></script>\r\n<script src=\"dist/inputmask/inputmask.numeric.extensions.js\"></script>\r\n<script src=\"dist/inputmask/inputmask.date.extensions.js\"></script>\r\n<script src=\"dist/inputmask/inputmask.phone.extensions.js\"></script>\r\n<script src=\"dist/inputmask/phone-codes/phone.js\"></script>\r\n<script src=\"dist/inputmask/phone-codes/phone-be.js\"></script>\r\n<script src=\"dist/inputmask/phone-codes/phone-ru.js\"></script>\r\n```\r\n\r\nIf you like to automatically bind the inputmask to the inputs marked with the data-inputmask- ... attributes you may also want to include the inputmask.binding.js\r\n\r\n```html\r\n<script src=\"dist/inputmask/bindings/inputmask.binding.js\"></script>\r\n```\r\n\r\n### webpack\r\n\r\n#### Install the package\r\n```\r\nnpm install inputmask --save-dev\r\n```\r\n\r\n#### In your modules\r\nIf you want to include the Inputmask and all extensions.\r\n```\r\nvar Inputmask = require('inputmask');\r\n\r\n//es6\r\nimport Inputmask from \"inputmask\";\r\n```\r\n\r\nFor individual extensions.   \r\nEvery extension exports the Inputmask, so you only need to import the extensions.  \r\nSee example.\r\n```\r\nrequire(\"inputmask/dist/inputmask/inputmask.numeric.extensions\");\r\nvar Inputmask = require(\"inputmask/dist/inputmask/inputmask.date.extensions\");\r\n\r\n//es6\r\nimport \"inputmask/dist/inputmask/inputmask.numeric.extensions\";\r\nimport Inputmask from \"inputmask/dist/inputmask/inputmask.date.extensions\";\r\n```\r\n\r\n#### Selecting the dependencyLib\r\nBy default the vanilla dependencyLib is used.  You can select another dependency\r\nby creating an alias in the webpack.config.\r\n\r\n```\r\n resolve: {\r\n        alias: {\r\n            \"./dependencyLibs/inputmask.dependencyLib\": \"./dependencyLibs/inputmask.dependencyLib.jquery\"\r\n        }\r\n    },\r\n```\r\n## Usage\r\n\r\n### via Inputmask class\r\n\r\n```javascript\r\nvar selector = document.getElementById(\"selector\");\r\n\r\nvar im = new Inputmask(\"99-9999999\");\r\nim.mask(selector);\r\n  \r\n//or\r\n  \r\nInputmask({\"mask\": \"(999) 999-9999\", .... other options .....}).mask(selector);\r\nInputmask(\"9-a{1,3}9{1,3}\").mask(selector);\r\nInputmask(\"9\", { repeat: 10 }).mask(selector);\r\n```\r\n\r\n### via jquery plugin\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(selector).inputmask(\"99-9999999\");  //static mask\r\n  $(selector).inputmask({\"mask\": \"(999) 999-9999\"}); //specifying options\r\n  $(selector).inputmask(\"9-a{1,3}9{1,3}\"); //mask with dynamic syntax\r\n});\r\n```\r\n\r\n### via data-inputmask attribute\r\n\r\n```html\r\n<input data-inputmask=\"'alias': 'date'\" />\r\n<input data-inputmask=\"'mask': '9', 'repeat': 10, 'greedy' : false\" />\r\n<input data-inputmask=\"'mask': '99-9999999'\" />\r\n```\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\":input\").inputmask();\r\n  or\r\n  Inputmask().mask(document.querySelectorAll(\"input\"));\r\n});\r\n```\r\n\r\n#### Any option can also be passed through the use of a data attribute. Use data-inputmask-<**_the name of the option_**>=\"value\"\r\n\r\n```html\r\n<input id=\"example1\" data-inputmask-clearmaskonlostfocus=\"false\" />\r\n<input id=\"example2\" data-inputmask-regex=\"[a-za-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\" />\r\n```\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#example1\").inputmask(\"99-9999999\");\r\n  $(\"#example2\").inputmask();\r\n});\r\n```\r\n\r\n### Allowed HTML-elements\r\n- `<input type=\"text\">`\r\n- `<input type=\"tel\">`\r\n- `<input type=\"password\">`\r\n- `<div contenteditable=\"true\">` (and all others supported by contenteditable)\r\n- `<textarea>`\r\n- any html-element (mask text content or set maskedvalue with jQuery.val)\r\n\r\nThe allowed input types are defined in the supportsInputType option. Also see ([input-type-ref])\r\n\r\n### Default masking definitions\r\n- `9` : numeric\r\n- `a` : alphabetical\r\n- `*` : alphanumeric\r\n\r\nThere are more definitions defined within the extensions.<br>You can find info within the js-files or by further exploring the options.\r\n\r\n## Masking types\r\n### Static masks\r\nThese are the very basic of masking.  The mask is defined and will not change during the input.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(selector).inputmask(\"aa-9999\");  //static mask\r\n  $(selector).inputmask({mask: \"aa-9999\"});  //static mask\r\n});\r\n```\r\n\r\n### Optional masks\r\nIt is possible to define some parts in the mask as optional.  This is done by using [ ].\r\n\r\nExample:\r\n\r\n```javascript\r\n$('#test').inputmask('(99) 9999[9]-9999');\r\n```\r\n\r\nThis mask wil allow input like `(99) 99999-9999` or `(99) 9999-9999`.\r\n\r\nInput => 12123451234      mask => (12) 12345-1234    (trigger complete)<br>\r\nInput => 121234-1234      mask => (12) 1234-1234     (trigger complete)<br>\r\nInput => 1212341234       mask => (12) 12341-234_    (trigger incomplete)\r\n\r\n#### skipOptionalPartCharacter\r\nAs an extra there is another configurable character which is used to skip an optional part in the mask.\r\n\r\n```javascript\r\nskipOptionalPartCharacter: \" \"\r\n```\r\n\r\nInput => 121234 1234      mask => (12) 1234-1234     (trigger complete)\r\n\r\nWhen `clearMaskOnLostFocus: true` is set in the options (default), the mask will clear out the optional part when it is not filled in and this only in case the optional part is at the end of the mask.\r\n\r\nFor example, given:\r\n\r\n```javascript\r\n$('#test').inputmask('999[-AAA]');\r\n```\r\n\r\nWhile the field has focus and is blank, users will see the full mask `___-___`. When the required part of the mask is filled and the field loses focus, the user will see `123`. When both the required and optional parts of the mask are filled out and the field loses focus, the user will see `123-ABC`.\r\n\r\n#### Optional masks with greedy false\r\nWhen defining an optional mask together with the greedy: false option, the inputmask will show the smallest possible mask as input first.\r\n\r\n```javascript\r\n$(selector).inputmask({ mask: \"9[-9999]\", greedy: false });\r\n```\r\n\r\nThe initial mask shown will be \"**_**\" instead of \"**_**-____\".\r\n\r\n### Dynamic masks\r\nDynamic masks can change during the input.  To define a dynamic part use { }.\r\n\r\n{n} => n repeats<br>{n,m} => from n to m repeats\r\n\r\nAlso {+} and {*} is allowed. + start from 1 and * start from 0.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(selector).inputmask(\"aa-9{4}\");  //static mask with dynamic syntax\r\n  $(selector).inputmask(\"aa-9{1,4}\");  //dynamic mask ~ the 9 def can be occur 1 to 4 times\r\n\r\n  //email mask\r\n  $(selector).inputmask({\r\n    mask: \"*{1,20}[.*{1,20}][.*{1,20}][.*{1,20}]@*{1,20}[.*{2,6}][.*{1,2}]\",\r\n    greedy: false,\r\n    onBeforePaste: function (pastedValue, opts) {\r\n      pastedValue = pastedValue.toLowerCase();\r\n      return pastedValue.replace(\"mailto:\", \"\");\r\n    },\r\n    definitions: {\r\n      '*': {\r\n        validator: \"[0-9A-Za-z!#$%&'*+/=?^_`{|}~\\-]\",\r\n        cardinality: 1,\r\n        casing: \"lower\"\r\n      }\r\n    }\r\n  });\r\n});\r\n```\r\n\r\n### Alternator masks\r\nThe alternator syntax is like an **OR** statement.  The mask can be one of the 3 choices specified in the alternator.\r\n\r\nTo define an alternator use the |.  \r\nex: \"a|9\" => a or 9  \r\n\"(aaa)|(999)\" => aaa or 999  \r\n\"(aaa|999|9AA)\" => aaa or 999 or 9AA\r\n\r\nAlso make sure to read about the keepStatic option.\r\n\r\n```javascript\r\n$(\"selector\").inputmask(\"(99.9)|(X)\", {\r\n  definitions: {\r\n    \"X\": {\r\n      validator: \"[xX]\",\r\n      cardinality: 1,\r\n      casing: \"upper\"\r\n    }\r\n  }\r\n});\r\n```\r\n\r\nor\r\n\r\n```javascript\r\n$(\"selector\").inputmask({\r\n  mask: [\"99.9\", \"X\"],\r\n  definitions: {\r\n    \"X\": {\r\n      validator: \"[xX]\",\r\n      cardinality: 1,\r\n      casing: \"upper\"\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n### Preprocessing masks\r\nYou can define the mask as a function which can allow to preprocess the resulting mask.  Example sorting for multiple masks or retrieving mask definitions dynamically through ajax. The preprocessing fn should return a valid mask definition.\r\n\r\n```javascript\r\n$(selector).inputmask({ mask: function () { /* do stuff */ return [\"[1-]AAA-999\", \"[1-]999-AAA\"]; }});\r\n```\r\n\r\n### JIT Masking\r\nJust in time masking.  With the jitMasking option you can enable jit masking.  The mask will only be visible for the user entered characters.\r\nDefault: false\r\n\r\nValue can be true or a threshold number or false.\r\n\r\n```javascript\r\nInputmask(\"date\", { jitMasking: true }).mask(selector);\r\n```\r\n\r\n## Define custom definitions\r\nYou can define your own definitions to use in your mask.<br>Start by choosing a masksymbol.\r\n\r\n### validator(chrs, maskset, pos, strict, opts)\r\nNext define your validator.  The validator can be a regular expression or a function.\r\n\r\nThe return value of a validator can be true,  false or a command object.\r\n\r\n#### Options of the command object\r\n- pos : position to insert\r\n- c : character to insert\r\n- caret : position of the caret\r\n- remove : position(s) to remove\r\n  - pos or [pos1, pos2]\r\n\r\n- insert : position(s) to add :\r\n  - { pos : position to insert, c : character to insert }\r\n  - [{ pos : position to insert, c : character to insert }, { ...}, ... ]\r\n\r\n- refreshFromBuffer :\r\n  - true => refresh validPositions from the complete buffer\r\n  - { start: , end: } => refresh from start to end\r\n\r\n### cardinality\r\nCardinality specifies how many characters are represented and validated for the definition.\r\n\r\n### prevalidator(chrs, maskset, pos, strict, opts)\r\nThe prevalidator option is used to validate the characters before the definition cardinality is reached. (see 'j' example)\r\n\r\n### definitionSymbol\r\nWhen you insert or delete characters, they are only shifted when the definition type is the same.  This behavior can be overridden by giving a definitionSymbol. (see example x, y, z, which can be used for ip-address masking, the validation is different, but it is allowed to shift the characters between the definitions)\r\n\r\n```javascript\r\nInputmask.extendDefinitions({\r\n  'f': {  //masksymbol\r\n    \"validator\": \"[0-9\\(\\)\\.\\+/ ]\",\r\n    \"cardinality\": 1,\r\n    'prevalidator': null\r\n  },\r\n  'g': {\r\n    \"validator\": function (chrs, buffer, pos, strict, opts) {\r\n      //do some logic and return true, false, or { \"pos\": new position, \"c\": character to place }\r\n    }\r\n    \"cardinality\": 1,\r\n    'prevalidator': null\r\n  },\r\n  'j': { //basic year\r\n    validator: \"(19|20)\\\\d{2}\",\r\n    cardinality: 4,\r\n    prevalidator: [\r\n      { validator: \"[12]\", cardinality: 1 },\r\n      { validator: \"(19|20)\", cardinality: 2 },\r\n      { validator: \"(19|20)\\\\d\", cardinality: 3 }\r\n    ]\r\n  },\r\n  'x': {\r\n    validator: \"[0-2]\",\r\n    cardinality: 1,\r\n    definitionSymbol: \"i\" //this allows shifting values from other definitions, with the same masksymbol or definitionSymbol\r\n  },\r\n  'y': {\r\n    validator: function (chrs, buffer, pos, strict, opts) {\r\n      var valExp2 = new RegExp(\"2[0-5]|[01][0-9]\");\r\n      return valExp2.test(buffer[pos - 1] + chrs);\r\n    },\r\n    cardinality: 1,\r\n    definitionSymbol: \"i\"\r\n  },\r\n  'z': {\r\n    validator: function (chrs, buffer, pos, strict, opts) {\r\n      var valExp3 = new RegExp(\"25[0-5]|2[0-4][0-9]|[01][0-9][0-9]\");\r\n      return valExp3.test(buffer[pos - 2] + buffer[pos - 1] + chrs);\r\n    },\r\n    cardinality: 1,\r\n    definitionSymbol: \"i\"\r\n  }\r\n});\r\n```\r\n\r\n### placeholder\r\nSpecify a placeholder for a definition.  This can also be a function.\r\n\r\n### set defaults\r\nDefaults can be set as below.\r\n\r\n```javascript\r\nInputmask.extendDefaults({\r\n  'autoUnmask': true\r\n});\r\nInputmask.extendDefinitions({\r\n  'A': {\r\n    validator: \"[A-Za-z\\u0410-\\u044F\\u0401\\u0451\\u00C0-\\u00FF\\u00B5]\",\r\n    cardinality: 1,\r\n    casing: \"upper\" //auto uppercasing\r\n  },\r\n  '+': {\r\n    validator: \"[0-9A-Za-z\\u0410-\\u044F\\u0401\\u0451\\u00C0-\\u00FF\\u00B5]\",\r\n    cardinality: 1,\r\n    casing: \"upper\"\r\n  }\r\n});\r\nInputmask.extendAliases({\r\n  'numeric': {\r\n    mask: \"r\",\r\n    greedy: false,\r\n    ...\r\n  }\r\n});\r\n```\r\n\r\nBut if the property is defined within an alias you need to set it for the alias definition.\r\n\r\n```javascript\r\nInputmask.extendAliases({\r\n  'numeric': {\r\n    allowPlus: false,\r\n    allowMinus: false\r\n  }\r\n});\r\n```\r\n\r\nHowever, the preferred way to alter properties for an alias is by creating a new alias which inherits from the default alias definition.\r\n\r\n```javascript\r\nInputmask.extendAliases({\r\n  'myNum': {\r\n    alias: \"numeric\",\r\n    placeholder: '',\r\n    allowPlus: false,\r\n    allowMinus: false\r\n  }\r\n});\r\n```\r\n\r\nOnce defined, you can call the alias by:\r\n\r\n```javascript\r\n$(selector).inputmask(\"myNum\");\r\n```\r\n\r\nAll callbacks are implemented as options.  This means that you can set general implementations for the callbacks by setting a default.\r\n\r\n```javascript\r\nInputmask.extendDefaults({\r\n  onKeyValidation: function(key, result){\r\n    if (!result){\r\n      alert('Your input is not valid')\r\n    }\r\n  }\r\n});\r\n```\r\n\r\n## Methods:\r\n### mask(elems)\r\nCreate a mask for the input.\r\n\r\n```javascript\r\n$(selector).inputmask({ mask: \"99-999-99\"});\r\n```\r\n\r\nor\r\n\r\n```javascript\r\nInputmask({ mask: \"99-999-99\"}).mask(document.querySelectorAll(selector));\r\n```\r\n\r\nor\r\n\r\n```javascript\r\nInputmask(\"99-999-99\").mask(document.querySelectorAll(selector));\r\n```\r\n\r\nor\r\n\r\n```javascript\r\nvar im = new Inputmask(\"99-999-99\");\r\nim.mask(document.querySelectorAll(selector));\r\n```\r\n\r\nor\r\n\r\n```javascript\r\nInputmask(\"99-999-99\").mask(selector);\r\n```\r\n\r\n### unmaskedvalue\r\nGet the `unmaskedvalue`\r\n\r\n\r\n```javascript\r\n$(selector).inputmask('unmaskedvalue');\r\n```\r\n\r\nor\r\n\r\n```javascript\r\nvar input = document.getElementById(selector);\r\nif (input.inputmask)\r\n  input.inputmask.unmaskedvalue()\r\n```\r\n\r\n#### Value unmasking\r\nUnmask a given value against the mask.\r\n\r\n```javascript\r\nvar unformattedDate = Inputmask.unmask(\"23/03/1973\", { alias: \"dd/mm/yyyy\"}); //23031973\r\n```\r\n\r\n### remove\r\nRemove the `inputmask`.\r\n\r\n```javascript\r\n$(selector).inputmask('remove');\r\n```\r\n\r\nor\r\n\r\n```javascript\r\nvar input = document.getElementById(selector);\r\nif (input.inputmask)\r\n  input.inputmask.remove()\r\n```\r\n\r\nor\r\n\r\n```javascript\r\nInputmask.remove(document.getElementById(selector));\r\n```\r\n\r\n### getemptymask\r\nreturn the default (empty) mask value\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#test\").inputmask(\"999-AAA\");\r\n  var initialValue = $(\"#test\").inputmask(\"getemptymask\");  // initialValue  => \"___-___\"\r\n});\r\n```\r\n\r\n### hasMaskedValue\r\nCheck whether the returned value is masked or not; currently only works reliably when using jquery.val fn to retrieve the value\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  function validateMaskedValue(val){}\r\n  function validateValue(val){}\r\n\r\n  var val = $(\"#test\").val();\r\n  if ($(\"#test\").inputmask(\"hasMaskedValue\"))\r\n    validateMaskedValue(val);\r\n  else\r\n    validateValue(val);\r\n});\r\n```\r\n\r\n### isComplete\r\nVerify whether the current value is complete or not.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  if ($(selector).inputmask(\"isComplete\")){\r\n    //do something\r\n  }\r\n});\r\n```\r\n\r\n### getmetadata\r\nThe metadata of the actual mask provided in the mask definitions can be obtained by calling getmetadata.  If only a mask is provided the mask definition will be returned by the getmetadata.\r\n\r\n```javascript\r\n$(selector).inputmask(\"getmetadata\");\r\n```\r\n\r\n### setvalue\r\nThe setvalue functionality is to set a value to the inputmask like you would do with jQuery.val, BUT it will trigger the internal event used by the inputmask always, whatever the case. This is particular usefull when cloning an inputmask with jQuery.clone.  Cloning an inputmask is not a fully functional clone.  On the first event (mouseenter, focus, ...) the inputmask can detect if it where cloned an can reactivate the masking.  However when setting the value with jQuery.val there is none of the events triggered in that case.  The setvalue functionality does this for you.\r\n\r\n### option(options, noremask)\r\nGet or set an option on an existing inputmask.\r\nThe option method is intented for adding extra options like callbacks, etc at a later time to the mask.\r\n\r\nWhen extra options are set the mask is automatically reapplied, unless you pas true for the noremask argument.\r\n\r\nSet an option\r\n```javascript\r\ndocument.querySelector(\"#CellPhone\").inputmask.option({\r\n  onBeforePaste: function (pastedValue, opts) {\r\n    return phoneNumOnPaste(pastedValue, opts);\r\n  }\r\n});\r\n```\r\n\r\n```javascript\r\n$(\"#CellPhone\").inputmask(\"option\", {\r\n  onBeforePaste: function (pastedValue, opts) {\r\n    return phoneNumOnPaste(pastedValue, opts);\r\n  }\r\n})\r\n```\r\n\r\n### format\r\nInstead of masking an input element it is also possible to use the inputmask for formatting given values. Think of formatting values to show in jqGrid or on other elements then inputs.\r\n\r\n```javascript\r\nvar formattedDate = Inputmask.format(\"2331973\", { alias: \"dd/mm/yyyy\"});\r\n```\r\n\r\n### isValid\r\nValidate a given value against the mask.\r\n\r\n```javascript\r\nvar isValid = Inputmask.isValid(\"23/03/1973\", { alias: \"dd/mm/yyyy\"});\r\n```\r\n\r\n## Options:\r\n### placeholder\r\nChange the mask placeholder.\r\nDefault: \"_\"\r\n\r\nInstead of \"_\", you can change the unfilled characters mask as you like, simply by adding the `placeholder` option.<br>\r\nFor example, `placeholder: \" \"` will change the default autofill with empty values\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#date\").inputmask(\"99/99/9999\",{ \"placeholder\": \"*\" });\r\n});\r\n```\r\n\r\nor a multi-char placeholder\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#date\").inputmask(\"99/99/9999\",{ \"placeholder\": \"dd/mm/yyyy\" });\r\n});\r\n```\r\n\r\n### optionalmarker\r\nDefinition of the symbols used to indicate an optional part in the mask.\r\n\r\n```javascript\r\noptionalmarker: { start: \"[\", end: \"]\" }\r\n```\r\n\r\n### quantifiermarker\r\nDefinition of the symbols used to indicate a quantifier in the mask.\r\n\r\n```javascript\r\nquantifiermarker: { start: \"{\", end: \"}\" }\r\n```\r\n\r\n### groupmarker\r\nDefinition of the symbols used to indicate a group in the mask.\r\n\r\n```javascript\r\ngroupmarker: { start: \"(\", end: \")\" }\r\n```\r\n\r\n### alternatormarker\r\nDefinition of the symbols used to indicate an alternator part in the mask.\r\n\r\n```javascript\r\nalternatormarker: \"|\"\r\n```\r\n\r\n### escapeChar\r\nDefinition of the symbols used to escape a part in the mask.\r\n\r\n```javascript\r\nescapeChar: \"\\\\\"\r\n```\r\n\r\nSee **escape special mask chars**\r\n\r\n### mask\r\nThe mask to use.\r\n\r\n### oncomplete\r\nExecute a function when the mask is completed\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#date\").inputmask(\"99/99/9999\",{ \"oncomplete\": function(){ alert('inputmask complete'); } });\r\n});\r\n```\r\n\r\n### onincomplete\r\nExecute a function when the mask is incomplete.  Executes on blur.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#date\").inputmask(\"99/99/9999\",{ \"onincomplete\": function(){ alert('inputmask incomplete'); } });\r\n});\r\n```\r\n\r\n### oncleared\r\nExecute a function when the mask is cleared.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#date\").inputmask(\"99/99/9999\",{ \"oncleared\": function(){ alert('inputmask cleared'); } });\r\n});\r\n```\r\n\r\n### repeat\r\nMask repeat function. Repeat the mask definition x-times.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#number\").inputmask({ \"mask\": \"9\", \"repeat\": 10 });  // ~ mask \"9999999999\"\r\n});\r\n```\r\n\r\n### greedy\r\nToggle to allocate as much possible or the opposite. Non-greedy repeat function.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#number\").inputmask({ \"mask\": \"9\", \"repeat\": 10, \"greedy\": false });  // ~ mask \"9\" or mask \"99\" or ... mask \"9999999999\"\r\n});\r\n```\r\n\r\nWith the non-greedy option set to false, you can specify * as repeat.  This makes an endless repeat.\r\n\r\n### autoUnmask\r\nAutomatically unmask the value when retrieved.<br>Default: false.\r\n\r\n**When setting this option to true the plugin also expects the initial value from the server to be unmasked.**\r\n\r\n### removeMaskOnSubmit\r\nRemove the mask before submitting the form.<br>Default: false\r\n\r\n### clearMaskOnLostFocus\r\nRemove the empty mask on blur or when not empty removes the optional trailing part Default: true\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#ssn\").inputmask(\"999-99-9999\",{placeholder:\" \", clearMaskOnLostFocus: true }); //default\r\n});\r\n```\r\n\r\n### insertMode\r\nToggle to insert or overwrite input.<br>Default: true.<br>This option can be altered by pressing the Insert key.\r\n\r\n### clearIncomplete\r\nClear the incomplete input on blur\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#date\").inputmask(\"99/99/9999\",{ \"clearIncomplete\": true });\r\n});\r\n```\r\n\r\n### aliases\r\nDefinitions of aliases.\r\n\r\nWith an alias you can define a complex mask definition and call it by using an alias name.  So this is mainly to simplify the use of your masks.  Some aliases found in the extensions are: email, currency, decimal, integer, date, datetime, dd/mm/yyyy, etc.\r\n\r\nFirst you have to create an alias definition.  The alias definition can contain options for the mask, custom definitions, the mask to use etc.\r\n\r\nWhen you pass in an alias, the alias is first resolved and then the other options are applied.  So you can call an alias and pass another mask to be applied over the alias. This also means that you can write aliases which \"inherit\" from another alias.\r\n\r\nSome examples can be found in jquery.inputmask.xxx.extensions.js\r\n\r\nuse:\r\n\r\n```javascript\r\n$(\"#date\").inputmask(\"date\");\r\n```\r\n\r\nor\r\n\r\n```javascript\r\n$(\"#date\").inputmask({ alias: \"date\"});\r\n```\r\n\r\nYou can also call an alias and extend it with some more options\r\n\r\n```javascript\r\n$(\"#date\").inputmask(\"date\", { \"clearIncomplete\": true });\r\n```\r\n\r\nor\r\n\r\n```javascript\r\n$(\"#date\").inputmask({ alias: \"date\", \"clearIncomplete\": true });\r\n```\r\n\r\n### alias\r\nThe alias to use.\r\n\r\n```javascript\r\n$(\"#date\").inputmask({ alias: \"email\"});\r\n```\r\n\r\n### onKeyDown\r\nCallback to implement autocomplete on certain keys for example\r\n\r\nFunction arguments: event, buffer, caretPos, opts<br>Function return:\r\n\r\n### onBeforeMask\r\nExecutes before masking the initial value to allow preprocessing of the initial value.\r\n\r\nFunction arguments: initialValue, opts<br>Function return: processedValue\r\n\r\n```javascript\r\n$(selector).inputmask({\r\n  alias: 'phonebe',\r\n  onBeforeMask: function (value, opts) {\r\n    var processedValue = value.replace(/^0/g, \"\");\r\n    if (processedValue.indexOf(\"32\") > 1 ||     processedValue.indexOf(\"32\") == -1) {\r\n      processedValue = \"32\" + processedValue;\r\n    }\r\n\r\n    return processedValue;\r\n  }\r\n});\r\n```\r\n\r\n### onBeforePaste\r\nThis callback allows for preprocessing the pasted value before actually handling the value for masking.  This can be usefull for stripping away some characters before processing.\r\n\r\nFunction arguments: pastedValue, opts<br>Function return: processedValue\r\n\r\n```javascript\r\n$(selector).inputmask({\r\n  mask: '9999 9999 9999 9999',\r\n  placeholder: ' ',\r\n  showMaskOnHover: false,\r\n  showMaskOnFocus: false,\r\n  onBeforePaste: function (pastedValue, opts) {\r\n    var processedValue = pastedValue;\r\n\r\n    //do something with it\r\n\r\n    return processedValue;\r\n  }\r\n});\r\n```\r\n\r\nYou can also disable pasting a value by returning false in the onBeforePaste call.\r\n\r\nDefault: Calls the onBeforeMask\r\n\r\n### onBeforeWrite\r\nExecutes before writing to the masked element\r\n\r\nUse this to do some extra processing of the input. This can be usefull when implementing an alias, ex. decimal alias, autofill the digits when leaving the inputfield.\r\n\r\nFunction arguments: event, buffer, caretPos, opts<br>Function return: command object (see Define custom definitions)\r\n\r\n### onUnMask\r\nExecutes after unmasking to allow post-processing of the unmaskedvalue.\r\n\r\nFunction arguments: maskedValue, unmaskedValue<br>Function return: processedValue\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#number\").inputmask(\"decimal\", { onUnMask: function(maskedValue, unmaskedValue) {\r\n    //do something with the value\r\n    return unmaskedValue;\r\n  }});\r\n});\r\n```\r\n\r\n### showMaskOnFocus\r\nShows the mask when the input gets focus. (default = true)\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#ssn\").inputmask(\"999-99-9999\",{ showMaskOnFocus: true }); //default\r\n});\r\n```\r\n\r\nTo make sure no mask is visible on focus also set the showMaskOnHover to false.  Otherwise hovering with the mouse will set the mask and will stay on focus.\r\n\r\n### showMaskOnHover\r\nShows the mask when hovering the mouse. (default = true)\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#ssn\").inputmask(\"999-99-9999\",{ showMaskOnHover: true }); //default\r\n});\r\n```\r\n\r\n### onKeyValidation\r\nCallback function is executed on every keyvalidation with the key & result as parameter.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#ssn\").inputmask(\"999-99-9999\", {\r\n    onKeyValidation: function (key, result) {\r\n      console.log(key + \" - \" + result);\r\n    }\r\n  });\r\n});\r\n```\r\n\r\n### skipOptionalPartCharacter\r\n\r\n### numericInput\r\nNumeric input direction.  Keeps the caret at the end.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(selector).inputmask('€ 999.999.999,99', { numericInput: true });    //123456  =>  € ___.__1.234,56\r\n});\r\n```\r\n\r\n### rightAlign\r\nAlign the input to the right\r\n\r\nBy setting the rightAlign you can specify to right align an inputmask. This is only applied in combination op the numericInput option or the dir-attribute. Default is true.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(selector).inputmask('decimal', { rightAlign: false });  //disables the right alignment of the decimal input\r\n});\r\n```\r\n\r\n### undoOnEscape\r\nMake escape behave like undo. (ctrl-Z)<br>Pressing escape reverts the value to the value before focus.<br>Default: true\r\n\r\n### radixPoint (numerics)\r\nDefine the radixpoint (decimal separator)<br>Default: \"\"\r\n\r\n### groupSeparator (numerics)\r\nDefine the groupseparator<br>Default: \"\"\r\n\r\n### keepStatic\r\nDefault: null (~false) Use in combination with the alternator syntax Try to keep the mask static while typing. Decisions to alter the mask will be postponed if possible.\r\n\r\nex. $(selector).inputmask({ mask: [\"+55-99-9999-9999\", \"+55-99-99999-9999\", ], keepStatic: true });\r\n\r\ntyping 1212345123 => should result in +55-12-1234-5123 type extra 4 => switch to +55-12-12345-1234\r\n\r\nWhen passing multiple masks (an array of masks) keepStatic is automatically set to true unless explicitly set through the options.\r\n\r\n### positionCaretOnTab\r\nWhen enabled the caret position is set after the latest valid position on TAB Default: true\r\n\r\n### tabThrough\r\nAllows for tabbing through the different parts of the masked field.<br>Default: false\r\n\r\n### definitions\r\n### ignorables\r\n### isComplete\r\nWith this call-in (hook) you can override the default implementation of the isComplete function.<br>Args => buffer, opts Return => true|false\r\n\r\n```javascript\r\n$(selector).inputmask({\r\n  regex: \"[0-9]*\",\r\n  isComplete: function(buffer, opts) {\r\n    return new RegExp(opts.regex).test(buffer.join(''));\r\n  }\r\n});\r\n```\r\n\r\n### canClearPosition\r\nHook to alter the clear behavior in the stripValidPositions<br>Args => maskset, position, lastValidPosition, opts<br>Return => true|false\r\n\r\n### postValidation\r\nHook to postValidate the result from isValid.  Usefull for validating the entry as a whole.  Args => buffer, currentResult, opts<br>Return => true|false|command object\r\n\r\n### preValidation\r\nHook to preValidate the input.  Useful for validating regardless the definition. Args => buffer, pos, char, isSelection, opts => return true/false/command object\r\nWhen return true, the normal validation kicks in, otherwise it is skipped.\r\n\r\n### staticDefinitionSymbol\r\nThe staticDefinitionSymbol option is used to indicate that the static entries in the mask can match a certain definition.  Especially usefull with alternators so that static element in the mask can match another alternation.\r\n\r\nIn the example below we mark the spaces as a possible match for the \"i\" definition.  By doing so the mask can alternate to the second mask even when we typed already \"12 3\".\r\n\r\n```javascript\r\nInputmask(\"(99 99 999999)|(i{+})\", {\r\n  definitions: {\r\n    \"i\": {\r\n      validator: \".\",\r\n      cardinality: 1,\r\n      definitionSymbol: \"*\"\r\n    }\r\n  },\r\n  staticDefinitionSymbol: \"*\"\r\n}).mask(selector);\r\n```\r\n\r\n### nullable\r\nReturn nothing when the user hasn't entered anything.\r\nDefault: true\r\n\r\n### noValuePatching\r\nDisable value property patching  \r\nDefault: false\r\n\r\n### positionCaretOnClick\r\nPositioning of the caret on click.  Options none, lvp (based on the last valid position (default), radixFocus (position caret to radixpoint on initial click)\r\nDefault: \"lvp\"\r\n\r\n### casing\r\nApply casing at the mask-level.\r\nOptions: null, \"upper\", \"lower\" or \"title\"   \r\nor callback args => elem, test, pos, validPositions return charValue\r\n\r\n```\r\ncasing: function(elem, test, pos, validPositions) {\r\n\tdo some processing || upper/lower input property in the validPositions\r\n\treturn elem; //upper/lower element\r\n}\r\n```\r\nDefault: null\r\n\r\n### inputmode\r\nDefault: \"verbatim\"\r\nSpecify the inputmode  - already in place for when browsers start to  support them\r\nhttps://html.spec.whatwg.org/#input-modalities:-the-inputmode-attribute\r\n\r\n### colorMask\r\nDefault: false\r\nCreate a css styleable mask.\r\nUses css classes: im-caret, im-static.\r\n\r\nYou need to include the inputmask.css in your page to use this option in full.\r\n\r\n## General\r\n### set a value and apply mask\r\nthis can be done with the traditional jquery.val function (all browsers) or JavaScript value property for browsers which implement lookupGetter or getOwnPropertyDescriptor\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#number\").val(12345);\r\n\r\n  var number = document.getElementById(\"number\");\r\n  number.value = 12345;\r\n});\r\n```\r\n\r\nwith the autoUnmaskoption you can change the return of $.fn.val (or value property) to unmaskedvalue or the maskedvalue\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $('#<%= tbDate.ClientID%>').inputmask({ \"mask\": \"99/99/9999\", 'autoUnmask' : true});    //  value: 23/03/1973\r\n  alert($('#<%= tbDate.ClientID%>').val());    // shows 23031973     (autoUnmask: true)\r\n\r\n  var tbDate = document.getElementById(\"<%= tbDate.ClientID%>\");\r\n  alert(tbDate.value);    // shows 23031973     (autoUnmask: true)\r\n});\r\n```\r\n\r\n### escape special mask chars\r\n\r\nIf you want a mask element to appear as a static element you can escape them by \\\\\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#months\").inputmask(\"m \\\\months\");\r\n});\r\n```\r\n\r\n### auto-casing inputmask\r\nYou can define within a definition to automatically apply some casing on the entry in an input by giving the casing.<br>Casing can be null, \"upper\", \"lower\" or \"title\".\r\n\r\n```javascript\r\nInputmask.extendDefinitions({\r\n  'A': {\r\n    validator: \"[A-Za-z]\",\r\n    cardinality: 1,\r\n    casing: \"upper\" //auto uppercasing\r\n  },\r\n  '+': {\r\n    validator: \"[A-Za-z\\u0410-\\u044F\\u0401\\u04510-9]\",\r\n    cardinality: 1,\r\n    casing: \"upper\"\r\n  }\r\n});\r\n```\r\n\r\nInclude jquery.inputmask.extensions.js for using the A and # definitions.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\"#test\").inputmask(\"999-AAA\");    //   => 123abc ===> 123-ABC\r\n});\r\n```\r\n\r\n## Supported markup options\r\n### RTL attribute\r\n\r\n```html\r\n<input id=\"test\" dir=\"rtl\" />\r\n```\r\n\r\n### readonly attribute\r\n\r\n```html\r\n<input id=\"test\" readonly=\"readonly\" />\r\n```\r\n\r\n### disabled attribute\r\n\r\n```html\r\n<input id=\"test\" disabled=\"disabled\" />\r\n```\r\n\r\n### maxlength attribute\r\n\r\n```html\r\n<input id=\"test\" maxlength=\"4\" />\r\n```\r\n\r\n### data-inputmask attribute\r\nYou can also apply an inputmask by using the data-inputmask attribute.  In the attribute you specify the options wanted for the inputmask. This gets parsed with $.parseJSON (for the moment), so be sure to use a well-formed json-string without the {}.\r\n\r\n```html\r\n<input data-inputmask=\"'alias': 'date'\" />\r\n<input data-inputmask=\"'mask': '9', 'repeat': 10, 'greedy' : false\" />\r\n```\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\":input\").inputmask();\r\n});\r\n```\r\n\r\n### data-inputmask-<option\\> attribute\r\nAll options can also be passed through data-attributes.\r\n\r\n```html\r\n<input data-inputmask-mask=\"9\" data-inputmask-repeat=\"10\" data-inputmask-greedy=\"false\" />\r\n```\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n  $(\":input\").inputmask();\r\n});\r\n```\r\n\r\n## jQuery.clone\r\nWhen cloning a inputmask, the inputmask reactivates on the first event (mouseenter, focus, ...) that happens to the input. If you want to set a value on the cloned inputmask and you want to directly reactivate the masking you have to use $(input).inputmask(\"setvalue\", value)\r\n\r\n# jquery.inputmask extensions\r\n## [date & datetime extensions](README_date.md)\r\n## [numeric extensions](README_numeric.md)\r\n## [phone extensions](README_phone.md)\r\n## [other extensions](README_other.md)\r\n\r\n[npm-url]: https://npmjs.org/package/inputmask\r\n[npm-image]: https://img.shields.io/npm/v/inputmask.svg\r\n[david-url]: https://david-dm.org/RobinHerbots/inputmask#info=dependencies\r\n[david-image]: https://img.shields.io/david/RobinHerbots/inputmask.svg\r\n[david-dev-url]: https://david-dm.org/RobinHerbots/inputmask#info=devDependencies\r\n[david-dev-image]: https://img.shields.io/david/dev/RobinHerbots/inputmask.svg\r\n[input-type-ref]: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\r\n",
  "readmeFilename": "README.md",
  "_id": "inputmask@3.3.11",
  "_shasum": "1421c94ae28c3dcd1b4d26337b508bb34998e2d8",
  "_from": "inputmask@^3.3.7",
  "_resolved": "https://registry.npmjs.org/inputmask/-/inputmask-3.3.11.tgz"
}
